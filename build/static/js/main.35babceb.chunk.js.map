{"version":3,"sources":["components/Search/Searchbar/Searchbar.js","components/Search/CategoryButtons/CategoryButtons.js","components/Search/Search.js","components/Results/JobEntry/JobEntry.js","components/Results/RowHeaders/RowHeaders.js","components/Results/Results.js","components/Spinner/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["Searchbar","props","className","icon","faSearch","color","disabled","type","placeholder","onChange","changed","CategoryButtons","categoryButtons","jobs","categories","map","el","category","Set","uniqueCategory","key","onClick","clicked","toUpperCase","Search","filterChangeHandler","categoryChangeHandler","JobEntry","UTCstring","Date","date","toUTCString","href","url","target","rel","title","experience","location","country","code","stateCode","name","RowHeaders","Results","finalList","categoryFilter","filter","job","inputFilter","length","description","text","toLowerCase","includes","trim","hostedUrl","id","createdDate","spinner","alt","src","App","useEffect","a","axios","get","results","data","setJobs","setError","message","fetchJobs","useState","setinputFilter","setCategory","error","e","input","value","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.35babceb.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Searchbar.css'\r\n\r\n\r\n//fort awesome\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faSearch } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\nconst Searchbar = (props) => {\r\n    return (\r\n        <div className='Searchbar'>\r\n            <span className={'Searchbar-glass'}><FontAwesomeIcon icon={faSearch}  color='black'/></span>\r\n            <input\r\n            disabled={props.disabled}\r\n            className='Searchbar-input'\r\n            type=\"text\"\r\n            placeholder={'Search by keyword, technology or job title'}\r\n            onChange={props.changed}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Searchbar;\r\n","import React from 'react';\r\nimport './CategoryButtons.css'\r\n\r\nconst CategoryButtons = (props) => {\r\n\r\n    let categoryButtons = null;\r\n    // mapping unique categories to display as buttons\r\n    if (props.jobs) {\r\n        const categories = props.jobs.map(el => el.category);\r\n        categoryButtons = [...new Set(categories)].map(uniqueCategory => {\r\n            return (\r\n            <button\r\n            key={uniqueCategory}\r\n            className={props.category === uniqueCategory ? 'active' : null}\r\n            onClick={() => props.clicked(uniqueCategory)}\r\n          >\r\n            #{uniqueCategory.toUpperCase()}\r\n          </button>\r\n            );\r\n        })\r\n    }\r\n    \r\n    return <div className='CategoryButtons__wrapper'>\r\n        {categoryButtons}\r\n    </div>;\r\n}\r\n\r\nexport default CategoryButtons;\r\n","import React from \"react\";\r\n\r\nimport './Search.css'\r\n\r\n//components\r\nimport Searchbar from './Searchbar/Searchbar'\r\nimport CategoryButtons from './CategoryButtons/CategoryButtons'\r\n//category buttons\r\n\r\nconst Search = props => {\r\n\r\n  return (\r\n    <div className='Search__wrapper'>\r\n      <Searchbar changed={props.filterChangeHandler} disabled={props.disabled}/>\r\n      <CategoryButtons category={props.category} clicked={props.categoryChangeHandler} jobs={props.jobs}/>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from 'react';\r\nimport './JobEntry.css'\r\n\r\nconst JobEntry = (props) => {\r\n\r\n    const formattedDate = new Date(props.date * 1000 );\r\n    const UTCstring = formattedDate.toUTCString();\r\n\r\n    return (\r\n        <li className='JobEntry'>\r\n            <a  className='JobEntry-content__wrapper' href={props.url} target=\"_blank\" rel=\"noopener noreferrer\">\r\n            <div className='JobEntry-title'>\r\n                <p>{props.title}</p>\r\n                <span className='JobEntry-extra'>\r\n                <p>Type: {props.type}, Experience: {props.experience}, Posted on: {UTCstring}</p>\r\n                </span>\r\n                </div>     \r\n            <div className='JobEntry-category'>{props.category}</div>     \r\n            <div className='JobEntry-location'>\r\n                <p>{props.location}</p>\r\n                <span className='JobEntry-extra'>\r\n                <p>State/Country: {props.country.code === 'US' ? `${props.stateCode}, ${props.country.name}` : props.country.name}</p>\r\n                </span>\r\n                </div>\r\n                <div className='JobEntry-arrow'>></div>\r\n            </a>\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default JobEntry;","import React from 'react';\r\nimport './RowHeaders.css'\r\n\r\nconst RowHeaders = () => {\r\n    return (\r\n        <div className='RowHeaders-content__wrapper'>\r\n            <div className='RowHeaders-title'>POSITION</div>     \r\n            <div className='RowHeaders-category'>CATEGORY</div>     \r\n            <div className='RowHeaders-location'>LOCATION</div>\r\n            <div className='RowHeaders-spacer'></div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default RowHeaders;\r\n","import React from \"react\";\r\nimport './Results.css'\r\n\r\n// components\r\nimport JobEntry from './JobEntry/JobEntry.js'\r\nimport RowHeaders from './RowHeaders/RowHeaders.js'\r\n\r\nconst Results = props => {\r\n\r\n  let finalList = props.jobs ? props.jobs : <p>Awaiting data....</p>;\r\n\r\n  //category filter\r\n  const categoryFilter =\r\n    props.category && props.jobs\r\n      ? props.jobs.filter(job => props.category === job.category)\r\n      : props.jobs;\r\n\r\n  //input filter\r\n  const inputFilter =\r\n    props.inputFilter && props.inputFilter.length > 1\r\n      ? categoryFilter.filter(\r\n          job =>\r\n            job.description.text\r\n              .toLowerCase()\r\n              .includes(props.inputFilter.trim().toLowerCase()) ||\r\n            job.title.toLowerCase().includes(props.inputFilter.trim().toLowerCase())\r\n        )\r\n      : categoryFilter;\r\n\r\n  finalList =\r\n    inputFilter.length !== 0 ? (\r\n      inputFilter.map(job => {\r\n        return <JobEntry\r\n        url={job.hostedUrl}\r\n        key={job.id}\r\n        title={job.title}\r\n        stateCode={job.stateCode}\r\n        country={job.country}\r\n        type={job.type.name}\r\n        date={job.createdDate}\r\n        experience={job.experience.name}\r\n        location={job.location}\r\n        category={job.category}/>;\r\n      })\r\n    ) : (\r\n      <h1 className='Results-noResults'>No results found...</h1>\r\n    );\r\n\r\n  return (\r\n  <div className='Results__wrapper'>\r\n    <RowHeaders/>\r\n    <ul >{finalList}</ul>\r\n  </div>);\r\n};\r\n\r\nexport default Results;\r\n\r\n\r\n\r\n\r\n","import React from \"react\";\r\nimport \"./Spinner.css\";\r\n\r\nconst spinner = () =>  <img alt={'spinner'} className='rotate' src={'https://hirehive.com/wp-content/uploads/2018/05/cropped-favicon-512-400x400.png'}/>\r\n\r\nexport default spinner;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n//components\r\nimport Search from \"./components/Search/Search\";\r\nimport Results from \"./components/Results/Results\";\r\nimport Spinner from \"./components/Spinner/Spinner\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n\r\n  // hook for API data fetching once when component is rendered\r\n  useEffect(() => {\r\n    async function fetchJobs() {\r\n      try {\r\n        const results = await axios.get(\r\n        \"https://hirehive-testing-account.hirehive.com/api/v1/jobs\");\r\n        const jobs = await results.data.jobs;\r\n        setJobs(jobs);\r\n      } catch(error) {\r\n        setError(error.message);\r\n      }\r\n    }\r\n    fetchJobs();\r\n  }, []);\r\n\r\n  //state with react hooks\r\n  const [jobs, setJobs] = useState();\r\n  const [inputFilter, setinputFilter] = useState();\r\n  const [category, setCategory] = useState();\r\n  const [error, setError] = useState();\r\n\r\n\r\n  //input handler for 'search' component\r\n  const filterChangeHandler = input => {\r\n    setinputFilter(input);\r\n  };\r\n\r\n  //category handler for 'search' component\r\n  const categoryChangeHandler = uniqueCategory => {\r\n    if (category !== uniqueCategory) {\r\n      setCategory(uniqueCategory);\r\n    } else {\r\n      setCategory();\r\n    }\r\n  };\r\n\r\n  //error message for errors, spinner for data fetching\r\n  let results = null;\r\n  if (error) {\r\n    results = <h1 className='App-error'>{error}</h1>;\r\n  } else if (jobs) {\r\n    results = <Results error={error} jobs={jobs} inputFilter={inputFilter} category={category} />\r\n  } else {\r\n    results = <Spinner />\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Search\r\n        jobs={jobs}\r\n        disabled={error}\r\n        category={category}\r\n        filterChangeHandler={e => filterChangeHandler(e.target.value)}\r\n        categoryChangeHandler={categoryChangeHandler}\r\n      />\r\n      {results}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}