{"version":3,"sources":["components/Search/Searchbar/Searchbar.js","components/Search/CategoryButtons/CategoryButtons.js","components/Search/Search.js","components/Results/JobEntry/JobEntry.js","components/Results/RowHeaders/RowHeaders.js","components/Results/Results.js","components/UI/Spinner/Spinner.js","App.js","serviceWorker.js","index.js"],"names":["searchbar","props","className","icon","faSearch","color","disabled","type","placeholder","onChange","changed","categoryButtons","checkForActivity","category","active","toLowerCase","inputFilter","trim","jobs","categories","map","el","Set","uniqueCategory","key","onClick","clicked","toUpperCase","Search","filterChangeHandler","categoryChangeHandler","jobEntry","UTCstring","Date","date","toUTCString","href","url","target","rel","title","experience","location","country","code","stateCode","name","rowHeaders","Results","finalList","categoryFilter","filter","job","length","description","text","includes","hostedUrl","id","publishedDate","spinner","alt","src","App","useEffect","a","axios","get","results","data","setJobs","console","log","setError","message","fetchJobs","useState","setinputFilter","setCategory","error","resultsComponent","e","input","value","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.125b9e77.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./Searchbar.css\";\r\n\r\n//fontawesome for icon\r\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\r\nimport { faSearch } from \"@fortawesome/free-solid-svg-icons\";\r\n\r\nconst searchbar = props => {\r\n  return (\r\n    <div className=\"Searchbar__wrapper\">\r\n      <div className={\"Searchbar-glass\"}>\r\n        <FontAwesomeIcon icon={faSearch} color=\"black\" />\r\n      </div>\r\n      <input\r\n        disabled={props.disabled}\r\n        className=\"Searchbar-input\"\r\n        type=\"text\"\r\n        placeholder={\"Search by keyword, technology, location or job title\"}\r\n        onChange={props.changed}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default searchbar;\r\n","import React from \"react\";\r\nimport \"./CategoryButtons.css\";\r\n\r\nconst categoryButtons = props => {\r\n  let categoryButtons = null;\r\n\r\n  // checking for selected category and input to light up the button if matching\r\n  const checkForActivity = category => {\r\n    let active = false;\r\n    if (category === props.category) {\r\n      active = true;\r\n    } else if (\r\n      `#${category.toLowerCase()}` === props.inputFilter.trim().toLowerCase()\r\n    ) {\r\n      active = true;\r\n    }\r\n    return active;\r\n  };\r\n\r\n  // mapping unique categories to display as buttons\r\n  if (props.jobs) {\r\n    const categories = props.jobs.map(el => el.category);\r\n    categoryButtons = [...new Set(categories)].map(uniqueCategory => {\r\n      return (\r\n        <button\r\n          key={uniqueCategory}\r\n          className={checkForActivity(uniqueCategory) ? \"active\" : null}\r\n          onClick={() => props.clicked(uniqueCategory)}\r\n        >\r\n          #{uniqueCategory.toUpperCase()}\r\n        </button>\r\n      );\r\n    });\r\n  }\r\n\r\n  return <div className=\"CategoryButtons__wrapper\">{categoryButtons}</div>;\r\n};\r\n\r\nexport default categoryButtons;\r\n","import React from \"react\";\r\nimport \"./Search.css\";\r\n\r\n//components\r\nimport Searchbar from \"./Searchbar/Searchbar\";\r\nimport CategoryButtons from \"./CategoryButtons/CategoryButtons\";\r\n\r\nconst Search = props => {\r\n  return (\r\n    <div className=\"Search__wrapper\">\r\n      <Searchbar\r\n        changed={props.filterChangeHandler}\r\n        disabled={props.disabled}\r\n      />\r\n      <CategoryButtons\r\n        inputFilter={props.inputFilter}\r\n        category={props.category}\r\n        clicked={props.categoryChangeHandler}\r\n        jobs={props.jobs}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Search;\r\n","import React from \"react\";\r\nimport \"./JobEntry.css\";\r\n\r\nconst jobEntry = props => {\r\n  const formattedDate = new Date(props.date * 1000);\r\n  const UTCstring = formattedDate.toUTCString();\r\n\r\n  return (\r\n    <li className=\"JobEntry\">\r\n      <a\r\n        className=\"JobEntry-content__wrapper\"\r\n        href={props.url}\r\n        target=\"_blank\"\r\n        rel=\"noopener noreferrer\"\r\n      >\r\n        <div className=\"JobEntry-title\">\r\n          <p>{props.title}</p>\r\n          <span className=\"JobEntry-extra\">\r\n            <p>\r\n              Type: {props.type}, Experience: {props.experience}\r\n            </p>\r\n            <p>Posted on: {UTCstring}</p>\r\n          </span>\r\n        </div>\r\n        <div className=\"JobEntry-category\">\r\n          <p>{props.category}</p>\r\n        </div>\r\n        <div className=\"JobEntry-location\">\r\n          <p>{props.location}</p>\r\n          <span className=\"JobEntry-extra\">\r\n            <p>\r\n              State/Country:{\" \"}\r\n              {props.country.code === \"US\"\r\n                ? `${props.stateCode}, ${props.country.name}`\r\n                : props.country.name}\r\n            </p>\r\n          </span>\r\n        </div>\r\n        <div className=\"JobEntry-arrow\">></div>\r\n      </a>\r\n    </li>\r\n  );\r\n};\r\n\r\nexport default jobEntry;\r\n","import React from \"react\";\r\nimport \"./RowHeaders.css\";\r\n\r\nconst rowHeaders = () => {\r\n  return (\r\n    <div className=\"RowHeaders-content__wrapper\">\r\n      <div className=\"RowHeaders-title\">POSITION</div>\r\n      <div className=\"RowHeaders-category\">CATEGORY</div>\r\n      <div className=\"RowHeaders-location\">LOCATION</div>\r\n      <div className=\"RowHeaders-spacer\"></div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default rowHeaders;\r\n","import React from \"react\";\r\nimport \"./Results.css\";\r\n\r\n// components\r\nimport JobEntry from \"./JobEntry/JobEntry.js\";\r\nimport RowHeaders from \"./RowHeaders/RowHeaders.js\";\r\n\r\nconst Results = props => {\r\n  let finalList = props.jobs ? props.jobs : null;\r\n\r\n  //category filter\r\n  const categoryFilter =\r\n    props.category && props.jobs\r\n      ? props.jobs.filter(job => props.category === job.category)\r\n      : props.jobs;\r\n\r\n  //input filter\r\n  const inputFilter =\r\n    props.inputFilter && props.inputFilter.length > 1\r\n      ? categoryFilter.filter(\r\n          job =>\r\n            job.description.text\r\n              .toLowerCase()\r\n              .includes(props.inputFilter.trim().toLowerCase()) ||\r\n            job.title\r\n              .toLowerCase()\r\n              .includes(props.inputFilter.trim().toLowerCase()) ||\r\n            job.location\r\n              .toLowerCase()\r\n              .includes(props.inputFilter.trim().toLowerCase()) ||\r\n            job.country.name\r\n              .toLowerCase()\r\n              .includes(props.inputFilter.trim().toLowerCase()) ||\r\n            `#${job.category}`\r\n              .toLowerCase()\r\n              .includes(props.inputFilter.trim().toLowerCase())\r\n        )\r\n      : categoryFilter;\r\n\r\n  finalList =\r\n    inputFilter.length !== 0 ? (\r\n      inputFilter.map(job => {\r\n        return (\r\n          <JobEntry\r\n            url={job.hostedUrl}\r\n            key={job.id}\r\n            title={job.title}\r\n            stateCode={job.stateCode}\r\n            country={job.country}\r\n            type={job.type.name}\r\n            date={job.publishedDate}\r\n            experience={job.experience.name}\r\n            location={job.location}\r\n            category={job.category}\r\n          />\r\n        );\r\n      })\r\n    ) : (\r\n      <h1 className=\"Results-noResults\">No results found... Try again!</h1>\r\n    );\r\n\r\n  return (\r\n    <div className=\"Results__wrapper\">\r\n      <RowHeaders />\r\n      <ul>{finalList}</ul>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Results;\r\n","import React from \"react\";\r\nimport \"./Spinner.css\";\r\n\r\nconst spinner = () =>  <img alt={'spinner'} className='rotate' src={'https://hirehive.com/wp-content/uploads/2018/05/cropped-favicon-512-400x400.png'}/>\r\n\r\nexport default spinner;\r\n","import React, { useState, useEffect } from \"react\";\r\nimport axios from \"axios\";\r\n\r\n//components\r\nimport Search from \"./components/Search/Search\";\r\nimport Results from \"./components/Results/Results\";\r\nimport Spinner from \"./components/UI/Spinner/Spinner\";\r\n\r\nimport \"./App.css\";\r\n\r\nfunction App() {\r\n  // useEffect hook for API data fetching once when component is rendered\r\n  useEffect(() => {\r\n    async function fetchJobs() {\r\n      try {\r\n        const results = await axios.get(\r\n          \"https://hirehive-testing-account.hirehive.com/api/v1/jobs\"\r\n        );\r\n        const jobs = await results.data.jobs;\r\n        setJobs(jobs);\r\n      } catch (error) {\r\n        console.log(error);\r\n        setError(error.message);\r\n      }\r\n    }\r\n    fetchJobs();\r\n  }, []);\r\n\r\n  //state with react hooks\r\n  const [jobs, setJobs] = useState();\r\n  const [inputFilter, setinputFilter] = useState(\"\");\r\n  const [category, setCategory] = useState();\r\n  const [error, setError] = useState();\r\n\r\n  //input handler for 'search' component\r\n  const filterChangeHandler = input => {\r\n    setinputFilter(input);\r\n  };\r\n\r\n  //category handler for 'search' component's Category buttons\r\n  const categoryChangeHandler = uniqueCategory => {\r\n    if (category !== uniqueCategory) {\r\n      setCategory(uniqueCategory);\r\n    } else {\r\n      setCategory();\r\n    }\r\n  };\r\n\r\n  //error message for errors, spinner for data fetching\r\n  let resultsComponent = null;\r\n  if (error) {\r\n    resultsComponent = <h1 className=\"App-error\">{error}</h1>;\r\n  } else if (jobs) {\r\n    resultsComponent = (\r\n      <Results\r\n        error={error}\r\n        jobs={jobs}\r\n        inputFilter={inputFilter}\r\n        category={category}\r\n      />\r\n    );\r\n  } else {\r\n    resultsComponent = <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <Search\r\n        jobs={jobs}\r\n        disabled={error}\r\n        category={category}\r\n        inputFilter={inputFilter}\r\n        filterChangeHandler={e => filterChangeHandler(e.target.value)}\r\n        categoryChangeHandler={categoryChangeHandler}\r\n      />\r\n      {resultsComponent}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"./index.css\";\r\nimport App from \"./App\";\r\nimport * as serviceWorker from \"./serviceWorker\";\r\n\r\nReactDOM.render(<App />, document.getElementById(\"root\"));\r\n\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}